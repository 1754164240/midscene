// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`elements > one or more elements 1`] = `"follow LOCATE_ONE_ELEMENT: some element like this"`;

exports[`elements > one or more elements 2`] = `"follow LOCATE_ONE_ELEMENT: some element like this"`;

exports[`elements > split answer 1`] = `"id_123"`;

exports[`elements > split answer 2`] = `
[
  "123",
  "456",
  "abdccc",
]
`;

exports[`prompts > describe constraints 1`] = `""`;

exports[`prompts > describe constraints 2`] = `
"Use your segment_a_web_page skill to find the following section(s)
* One section named \`title\`
* One section named \`list\`, usage or criteria : list of todo"
`;

exports[`prompts > describe constraints 3`] = `
"Use your segment_a_web_page skill to find the following section(s)
* One section , usage or criteria : domestic news"
`;

exports[`prompts > describe constraints 4`] = `
"Use your segment_a_web_page skill to find the following section(s)
* One section named \`title\`
* One section named \`list\`, usage or criteria : list of todo
* One section named \`control\`"
`;

exports[`prompts > describe user page 1`] = `
"page size: NNNN x NNNN

The following texts elements are formatted in the following way: 
id(string), left, top, right, bottom, content(may be truncated)
text elements:
N, NN, NN, NNN, NN, Data Record
N, NN, NN, NNN, NNN, NNNN-NN-NN NN:NN:NN
N, NN, NNN, NNN, NNN, User Name: Stella
N, NN, NNN, NN, NNN, ID
N, NN, NNN, NNN, NNN, Field N
N, NNN, NNN, NNN, NNN, Field N
N, NNN, NNN, NNN, NNN, Field N
N, NNN, NNN, NNN, NNN, Field N
N, NN, NNN, NN, NNN, NNS
N, NN, NNN, NNN, NNN, Kace Cervantes
NN, NNN, NNN, NNN, NNN, Aylin Sawyer
NN, NNN, NNN, NNN, NNN, Jefferson Kirby
NN, NNN, NNN, NNN, NNN, Skyla Jefferson
NN, NN, NNN, NN, NNN, NNU
NN, NN, NNN, NNN, NNN, Florence Davenport
NN, NNN, NNN, NNN, NNN, Dariel Acevedo
NN, NNN, NNN, NNN, NNN, Ashlynn Delacruz
NN, NNN, NNN, NNN, NNN, Memphis Leal
NN, NN, NNN, NN, NNN, NAY
NN, NN, NNN, NNN, NNN, Crystal Newman
NN, NNN, NNN, NNN, NNN, Anderson Brown
NN, NNN, NNN, NNN, NNN, Charlotte Griffith
NN, NNN, NNN, NNN, NNN, Franklin Everett
NN, NN, NNN, NN, NNN, YPG
NN, NN, NNN, NNN, NNN, Kori Payne
NN, NNN, NNN, NNN, NNN, Edward Blevins
NN, NNN, NNN, NNN, NNN, Aila Gill
NN, NNN, NNN, NNN, NNN, Matthias Reed
NN, NN, NNN, NN, NNN, ZEN
NN, NN, NNN, NNN, NNN, Magnolia Duke
NN, NNN, NNN, NNN, NNN, Kalel Glover
NN, NNN, NNN, NNN, NNN, Alessia Barton
NN, NNN, NNN, NNN, NNN, Cassius Peck
NN, NN, NNN, NN, NNN, Form
NN, NN, NNN, NN, NNN, Name:
NN, NN, NNN, NNN, NNN, Hello World This is Placeholder
NN, NNN, NNN, NNN, NNN, Click Me
NN, NNN, NNN, NNN, NNN, Shape
NN, NNN, NNN, NNN, NNN, Rectangle"
`;

exports[`prompts > prompt to check github 1`] = `
{
  "section": "SECTION_MATCHER_FLAG/section to check the status of issue",
  "status": "string, like normal",
  "statusElement": "follow LOCATE_ONE_OR_MORE_ELEMENTS: element indicates the status",
}
`;

exports[`prompts > system prompt for extract, w/ section 1`] = `
"
You are a versatile professional in software UI design and testing. Your outstanding contributions will impact the user experience of billions of users.

The user will give you a screenshot and the texts on it. There may be some none-English characters (like Chinese) on it, indicating it's an non-English app.

You have the following skills:

skill name: extract_data_from_UI
related input: DATA_DEMAND
skill content: 
* User will give you some data requirements in DATA_DEMAND. Consider the UI context, follow the user's instructions, and provide comprehensive data accordingly.
* There may be some special commands in DATA_DEMAND, please pay extra attention
  - LOCATE_ONE_ELEMENT and LOCATE_ONE_OR_MORE_ELEMENTS: if you see a description that mentions the keyword LOCATE_ONE_ELEMENT or LOCATE_ONE_OR_MORE_ELEMENTS(e.g. follow LOCATE_ONE_ELEMENT : i want to find ...), it means user wants to locate a specific element meets the description. Return in this way: prefix + the id / comma-separated ids, for example: LOCATE_ONE_ELEMENT/1 , LOCATE_ONE_OR_MORE_ELEMENTS/1,2,3 . If not found, keep the prefix and leave the suffix empty, like LOCATE_ONE_ELEMENT/ .

Now, do the following jobs:

Use your extract_data_from_UI skill to find the following data, placing it in the \`data\` field
DATA_DEMAND start:
;
find something
DATA_DEMAND ends.

Return in the following JSON format:
{
  language: "en", // "en" or "zh", the language of the page. Use the same language to describe section name, description, and similar fields.
  
  data: any, // the extracted data from extract_data_from_UI skill. Make sure both the value and scheme meet the DATA_DEMAND.
  errors?: [], // string[], error message if any
}
"
`;

exports[`prompts > system prompt for extract, w/ section 2`] = `
"
You are a versatile professional in software UI design and testing. Your outstanding contributions will impact the user experience of billions of users.

The user will give you a screenshot and the texts on it. There may be some none-English characters (like Chinese) on it, indicating it's an non-English app.

You have the following skills:
skill name: segment_a_web_page 
skill content:
Based on the functions and content of various elements on the page, segment the screenshot into different sections like navigation bar, product list, news area, etc. 
Some general rules for segmentation:
* Each section should NOT overlap with each other.
* Each text should only belong to one section.
* [IMPORTANT] Whether the content visually appears to belong to different sections is a significant factor in segmenting the page.
* Analyze the page in a top-to-bottom and left-to-right order.
* The evidence indicates a separate section, for example 
  - The background color of certain parts of the page changes.
  - A section of a page includes a title.
* Provide the following data for each of the UI section you found.
  {
    "name": "name of the section",
    "description": "briefly summarize the key content or usage of this section.",
    "sectionCharacteristics": "In view of the need to distinguish this section from the surrounding sections, explain the characteristics and how to define boundaries and what precautions to take.",
    "textIds": ["5", "6", "7"], // ids of all text elements in this section
  }

skill name: extract_data_from_UI
related input: DATA_DEMAND
skill content: 
* User will give you some data requirements in DATA_DEMAND. Consider the UI context, follow the user's instructions, and provide comprehensive data accordingly.
* There may be some special commands in DATA_DEMAND, please pay extra attention
  - LOCATE_ONE_ELEMENT and LOCATE_ONE_OR_MORE_ELEMENTS: if you see a description that mentions the keyword LOCATE_ONE_ELEMENT or LOCATE_ONE_OR_MORE_ELEMENTS(e.g. follow LOCATE_ONE_ELEMENT : i want to find ...), it means user wants to locate a specific element meets the description. Return in this way: prefix + the id / comma-separated ids, for example: LOCATE_ONE_ELEMENT/1 , LOCATE_ONE_OR_MORE_ELEMENTS/1,2,3 . If not found, keep the prefix and leave the suffix empty, like LOCATE_ONE_ELEMENT/ .

Now, do the following jobs:
Use your segment_a_web_page skill to find the following section(s)
* One section named \`title\`
* One section named \`list\`, usage or criteria : list of todo
Use your extract_data_from_UI skill to find the following data, placing it in the \`data\` field
DATA_DEMAND start:
;
find something
DATA_DEMAND ends.

Return in the following JSON format:
{
  language: "en", // "en" or "zh", the language of the page. Use the same language to describe section name, description, and similar fields.
    sections: [], // detailed information of each section from segment_a_web_page skill
  data: any, // the extracted data from extract_data_from_UI skill. Make sure both the value and scheme meet the DATA_DEMAND.
  errors?: [], // string[], error message if any
}
"
`;

exports[`prompts > system prompt for extract, w/ section 3`] = `
"
You are a versatile professional in software UI design and testing. Your outstanding contributions will impact the user experience of billions of users.

The user will give you a screenshot and the texts on it. There may be some none-English characters (like Chinese) on it, indicating it's an non-English app.

You have the following skills:

skill name: extract_data_from_UI
related input: DATA_DEMAND
skill content: 
* User will give you some data requirements in DATA_DEMAND. Consider the UI context, follow the user's instructions, and provide comprehensive data accordingly.
* There may be some special commands in DATA_DEMAND, please pay extra attention
  - LOCATE_ONE_ELEMENT and LOCATE_ONE_OR_MORE_ELEMENTS: if you see a description that mentions the keyword LOCATE_ONE_ELEMENT or LOCATE_ONE_OR_MORE_ELEMENTS(e.g. follow LOCATE_ONE_ELEMENT : i want to find ...), it means user wants to locate a specific element meets the description. Return in this way: prefix + the id / comma-separated ids, for example: LOCATE_ONE_ELEMENT/1 , LOCATE_ONE_OR_MORE_ELEMENTS/1,2,3 . If not found, keep the prefix and leave the suffix empty, like LOCATE_ONE_ELEMENT/ .

Now, do the following jobs:
Use your segment_a_web_page skill to find the following section(s)
* One section , usage or criteria : domestic news
Use your extract_data_from_UI skill to find the following data, placing it in the \`data\` field
DATA_DEMAND start:
;
find something
DATA_DEMAND ends.

Return in the following JSON format:
{
  language: "en", // "en" or "zh", the language of the page. Use the same language to describe section name, description, and similar fields.
  
  data: any, // the extracted data from extract_data_from_UI skill. Make sure both the value and scheme meet the DATA_DEMAND.
  errors?: [], // string[], error message if any
}
"
`;

exports[`prompts > system prompt for extract, w/ section 4`] = `
"
You are a versatile professional in software UI design and testing. Your outstanding contributions will impact the user experience of billions of users.

The user will give you a screenshot and the texts on it. There may be some none-English characters (like Chinese) on it, indicating it's an non-English app.

You have the following skills:
skill name: segment_a_web_page 
skill content:
Based on the functions and content of various elements on the page, segment the screenshot into different sections like navigation bar, product list, news area, etc. 
Some general rules for segmentation:
* Each section should NOT overlap with each other.
* Each text should only belong to one section.
* [IMPORTANT] Whether the content visually appears to belong to different sections is a significant factor in segmenting the page.
* Analyze the page in a top-to-bottom and left-to-right order.
* The evidence indicates a separate section, for example 
  - The background color of certain parts of the page changes.
  - A section of a page includes a title.
* Provide the following data for each of the UI section you found.
  {
    "name": "name of the section",
    "description": "briefly summarize the key content or usage of this section.",
    "sectionCharacteristics": "In view of the need to distinguish this section from the surrounding sections, explain the characteristics and how to define boundaries and what precautions to take.",
    "textIds": ["5", "6", "7"], // ids of all text elements in this section
  }

skill name: extract_data_from_UI
related input: DATA_DEMAND
skill content: 
* User will give you some data requirements in DATA_DEMAND. Consider the UI context, follow the user's instructions, and provide comprehensive data accordingly.
* There may be some special commands in DATA_DEMAND, please pay extra attention
  - LOCATE_ONE_ELEMENT and LOCATE_ONE_OR_MORE_ELEMENTS: if you see a description that mentions the keyword LOCATE_ONE_ELEMENT or LOCATE_ONE_OR_MORE_ELEMENTS(e.g. follow LOCATE_ONE_ELEMENT : i want to find ...), it means user wants to locate a specific element meets the description. Return in this way: prefix + the id / comma-separated ids, for example: LOCATE_ONE_ELEMENT/1 , LOCATE_ONE_OR_MORE_ELEMENTS/1,2,3 . If not found, keep the prefix and leave the suffix empty, like LOCATE_ONE_ELEMENT/ .

Now, do the following jobs:
Use your segment_a_web_page skill to find the following section(s)
* One section named \`title\`
* One section named \`list\`, usage or criteria : list of todo
* One section named \`control\`
Use your extract_data_from_UI skill to find the following data, placing it in the \`data\` field
DATA_DEMAND start:
;
find something
DATA_DEMAND ends.

Return in the following JSON format:
{
  language: "en", // "en" or "zh", the language of the page. Use the same language to describe section name, description, and similar fields.
    sections: [], // detailed information of each section from segment_a_web_page skill
  data: any, // the extracted data from extract_data_from_UI skill. Make sure both the value and scheme meet the DATA_DEMAND.
  errors?: [], // string[], error message if any
}
"
`;

exports[`prompts > system prompt for extract, wo/ section 1`] = `
"
You are a versatile professional in software UI design and testing. Your outstanding contributions will impact the user experience of billions of users.

The user will give you a screenshot and the texts on it. There may be some none-English characters (like Chinese) on it, indicating it's an non-English app.

You have the following skills:

skill name: extract_data_from_UI
related input: DATA_DEMAND
skill content: 
* User will give you some data requirements in DATA_DEMAND. Consider the UI context, follow the user's instructions, and provide comprehensive data accordingly.
* There may be some special commands in DATA_DEMAND, please pay extra attention
  - LOCATE_ONE_ELEMENT and LOCATE_ONE_OR_MORE_ELEMENTS: if you see a description that mentions the keyword LOCATE_ONE_ELEMENT or LOCATE_ONE_OR_MORE_ELEMENTS(e.g. follow LOCATE_ONE_ELEMENT : i want to find ...), it means user wants to locate a specific element meets the description. Return in this way: prefix + the id / comma-separated ids, for example: LOCATE_ONE_ELEMENT/1 , LOCATE_ONE_OR_MORE_ELEMENTS/1,2,3 . If not found, keep the prefix and leave the suffix empty, like LOCATE_ONE_ELEMENT/ .

Now, do the following jobs:

Use your extract_data_from_UI skill to find the following data, placing it in the \`data\` field
DATA_DEMAND start:
;
help me to find out
DATA_DEMAND ends.

Return in the following JSON format:
{
  language: "en", // "en" or "zh", the language of the page. Use the same language to describe section name, description, and similar fields.
  
  data: any, // the extracted data from extract_data_from_UI skill. Make sure both the value and scheme meet the DATA_DEMAND.
  errors?: [], // string[], error message if any
}
"
`;

exports[`prompts > system prompt for extract, wo/ section 2`] = `
"
You are a versatile professional in software UI design and testing. Your outstanding contributions will impact the user experience of billions of users.

The user will give you a screenshot and the texts on it. There may be some none-English characters (like Chinese) on it, indicating it's an non-English app.

You have the following skills:

skill name: extract_data_from_UI
related input: DATA_DEMAND
skill content: 
* User will give you some data requirements in DATA_DEMAND. Consider the UI context, follow the user's instructions, and provide comprehensive data accordingly.
* There may be some special commands in DATA_DEMAND, please pay extra attention
  - LOCATE_ONE_ELEMENT and LOCATE_ONE_OR_MORE_ELEMENTS: if you see a description that mentions the keyword LOCATE_ONE_ELEMENT or LOCATE_ONE_OR_MORE_ELEMENTS(e.g. follow LOCATE_ONE_ELEMENT : i want to find ...), it means user wants to locate a specific element meets the description. Return in this way: prefix + the id / comma-separated ids, for example: LOCATE_ONE_ELEMENT/1 , LOCATE_ONE_OR_MORE_ELEMENTS/1,2,3 . If not found, keep the prefix and leave the suffix empty, like LOCATE_ONE_ELEMENT/ .

Now, do the following jobs:

Use your extract_data_from_UI skill to find the following data, placing it in the \`data\` field
DATA_DEMAND start:
return in key-value style object, keys are foo;
{
  "foo": "tell me the color of sea"
}
DATA_DEMAND ends.

Return in the following JSON format:
{
  language: "en", // "en" or "zh", the language of the page. Use the same language to describe section name, description, and similar fields.
  
  data: any, // the extracted data from extract_data_from_UI skill. Make sure both the value and scheme meet the DATA_DEMAND.
  errors?: [], // string[], error message if any
}
"
`;

exports[`prompts > system prompt for finding element 1`] = `
"
You are a versatile professional in software UI design and testing. Your outstanding contributions will impact the user experience of billions of users.

The user will give you a screenshot and the texts on it. There may be some none-English characters (like Chinese) on it, indicating it's an non-English app.

Based on the information you get, find ONE text element on the page.
Here is the description: guess who am i
  
Return in the following JSON format:
{
  "elements": [ // Leave it an empty array when no element is found
    { 
      "id": "id of the element, like 123", 
    },
    // more ...
  ], 
  errors?: [], // string[], error message if any
}
"
`;

exports[`prompts > system prompt for finding element 2`] = `
"
You are a versatile professional in software UI design and testing. Your outstanding contributions will impact the user experience of billions of users.

The user will give you a screenshot and the texts on it. There may be some none-English characters (like Chinese) on it, indicating it's an non-English app.

Based on the information you get, find one or more text elements on the page.
Here is the description: guess who am i
  
Return in the following JSON format:
{
  "elements": [ // Leave it an empty array when no element is found
    { 
      "id": "id of the element, like 123", 
    },
    // more ...
  ], 
  errors?: [], // string[], error message if any
}
"
`;

exports[`section > retrieve 1`] = `"SECTION_MATCHER_FLAG/get something for me"`;
